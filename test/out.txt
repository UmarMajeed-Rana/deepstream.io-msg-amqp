false
{ domain: null,
  _events: 
   { connect: [Function],
     data: [Function],
     error: [ [Function: backoff], [Function] ],
     ready: [ [Function], [Function] ],
     end: [Function],
     close: [Function] },
  _maxListeners: 10,
  options: 
   { host: 'localhost',
     port: 5672,
     login: 'guest',
     password: 'guest',
     authMechanism: 'AMQPLAIN',
     vhost: '/',
     connectionTimeout: 10000,
     ssl: { enabled: false },
     clientProperties: 
      { version: '0.2.0',
        platform: 'node-v0.10.23',
        product: 'node-amqp' } },
  implOptions: 
   { defaultExchangeName: '',
     reconnect: true,
     reconnectBackoffStrategy: 'linear',
     reconnectExponentialLimit: 120000,
     reconnectBackoffTime: 1000 },
  connectionAttemptScheduled: false,
  _defaultExchange: null,
  channelCounter: 1,
  _sendBuffer: <Buffer 01 00 01 00 00 00 24 00 28 00 0a 00 00 12 44 45 45 50 53 54 52 45 41 4d 5f 50 55 42 5f 53 55 42 05 74 6f 70 69 63 04 00 00 00 00 ce 00 00 0d 6e 6f 64 65 ...>,
  socket: 
   { _connecting: false,
     _handle: 
      { fd: null,
        writeQueueSize: 0,
        owner: [Circular],
        onread: [Function: onread],
        reading: true },
     _readableState: 
      { highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: false,
        ended: false,
        endEmitted: false,
        reading: true,
        calledRead: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        objectMode: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        connect: [Object],
        timeout: [Object],
        close: [Function],
        data: [Function],
        readable: [Function],
        drain: [Function],
        error: [Function],
        secureConnect: [Function] },
     _maxListeners: 10,
     _writableState: 
      { highWaterMark: 16384,
        objectMode: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        buffer: [] },
     writable: true,
     allowHalfOpen: false,
     onend: null,
     destroyed: false,
     errorEmitted: false,
     bytesRead: 473,
     _bytesDispatched: 238,
     _pendingData: null,
     _pendingEncoding: '',
     _idleTimeout: -1,
     _idleNext: null,
     _idlePrev: null,
     _idleStart: 1416162235971,
     pipe: [Function],
     addListener: [Function],
     on: [Function],
     pause: [Function],
     resume: [Function],
     read: [Function],
     _consuming: true },
  end: [Function],
  destroy: [Function],
  write: [Function],
  pause: [Function],
  resume: [Function],
  setEncoding: [Function],
  ref: [Function],
  unref: [Function],
  address: [Function],
  channels: 
   { '0': [Circular],
     '1': 
      { domain: null,
        _events: {},
        _maxListeners: 0,
        channel: 1,
        connection: [Circular],
        _tasks: [],
        name: 'DEEPSTREAM_PUB_SUB',
        binds: 0,
        exchangeBinds: 0,
        sourceExchanges: {},
        options: [Object],
        _openCallback: undefined,
        _sequence: null,
        _unAcked: {},
        _addedExchangeErrorHandler: false,
        state: 'open' } },
  queues: {},
  exchanges: 
   { DEEPSTREAM_PUB_SUB: 
      { domain: null,
        _events: {},
        _maxListeners: 0,
        channel: 1,
        connection: [Circular],
        _tasks: [],
        name: 'DEEPSTREAM_PUB_SUB',
        binds: 0,
        exchangeBinds: 0,
        sourceExchanges: {},
        options: [Object],
        _openCallback: undefined,
        _sequence: null,
        _unAcked: {},
        _addedExchangeErrorHandler: false,
        state: 'open' } },
  parser: 
   { isClient: true,
     state: 'frameHeader',
     parse: [Function: header],
     onMethod: [Function],
     onContent: [Function],
     onContentHeader: [Function],
     onHeartBeat: [Function],
     onError: [Function] },
  readyEmitted: true,
  serverProperties: 
   { capabilities: 
      { publisher_confirms: true,
        exchange_exchange_bindings: true,
        'basic.nack': true,
        consumer_cancel_notify: true,
        'connection.blocked': true,
        consumer_priorities: true,
        authentication_failure_close: true },
     copyright: 'Copyright (C) 2007-2013 GoPivotal, Inc.',
     information: 'Licensed under the MPL.  See http://www.rabbitmq.com/',
     platform: 'Erlang/OTP',
     product: 'RabbitMQ',
     version: '3.2.2' },
  _outboundHeartbeatTimer: null,
  _inboundHeartbeatTimer: null }
